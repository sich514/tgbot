import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

API_TOKEN = '7853348507:AAHoebNIo8lXep2hZ-wJhYgN7dahXzXAGP4'
ADMIN_CHAT_ID = 411134984

# ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

questions = [
    "üß† –û–ø–∏—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ —Ç–µ–º—É, –æ—Ç–∫—É–¥–∞, –∫—É–¥–∞ –∏ —á—Ç–æ?",
    "üìà –ö–∞–∫–æ–π –∞–ø—Å–∞–π–¥, –∫–∞–∫–æ–π –º–∏–Ω–∏–º—É–º –¥–ª—è –≤—Ö–æ–¥–∞, –∫–∞–∫–æ–π –º–∞–∫—Å–∏–º—É–º?",
    "‚è≥ –ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è —Å–¥–µ–ª–∫–∞?",
    "‚ö†Ô∏è –ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏ —Ç—ã –≤–∏–¥–∏—à—å?",
    "üìä –†–∞—Å—Å–∫–∞–∂–∏, –ø—Ä–æ–±–æ–≤–∞–ª –ª–∏ —Ç—ã —Å–∞–º. –ï—Å–ª–∏ –¥–∞ ‚Äî –Ω–∞ –∫–∞–∫–æ–π –æ–±—ä—ë–º –∏ –∫–∞–∫–æ–π –≤—ã—à–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–∏–ª–æ–∂–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."
]

class Form(StatesGroup):
    step_0 = State()
    step_1 = State()
    step_2 = State()
    step_3 = State()
    step_4 = State()

user_answers = {}

# üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message(Command("start"))
async def welcome(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –∑–∞—è–≤–∫—É")]],
        resize_keyboard=True
    )

    await message.answer(
        "<b>–£ —Ç–µ–±—è –µ—Å—Ç—å –∏–¥–µ—è –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –Ω–µ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞?</b>\n\n"
        "–û–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ. –ï—Å–ª–∏ –Ω–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è ‚Äî –º—ã –ø–æ–¥–µ–ª–∏–º—Å—è —Å —Ç–æ–±–æ–π –ø—Ä–æ—Ñ–∏—Ç–æ–º —Å —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá",
        reply_markup=keyboard
    )

# üü¢ –ó–∞–ø—É—Å–∫ —Ñ–æ—Ä–º—ã –ø–æ –∫–Ω–æ–ø–∫–µ
@dp.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å –∑–∞—è–≤–∫—É")
async def start_form(message: Message, state: FSMContext):
    await state.set_state(Form.step_0)
    user_answers[message.from_user.id] = []
    await message.answer(questions[0])

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –∞–Ω–∫–µ—Ç—ã
@dp.message(Form.step_0)
async def handle_step_0(message: Message, state: FSMContext):
    user_answers[message.from_user.id].append(message.text)
    await state.set_state(Form.step_1)
    await message.answer(questions[1])

@dp.message(Form.step_1)
async def handle_step_1(message: Message, state: FSMContext):
    user_answers[message.from_user.id].append(message.text)
    await state.set_state(Form.step_2)
    await message.answer(questions[2])

@dp.message(Form.step_2)
async def handle_step_2(message: Message, state: FSMContext):
    user_answers[message.from_user.id].append(message.text)
    await state.set_state(Form.step_3)
    await message.answer(questions[3])

@dp.message(Form.step_3)
async def handle_step_3(message: Message, state: FSMContext):
    user_answers[message.from_user.id].append(message.text)
    await state.set_state(Form.step_4)
    await message.answer(questions[4])

@dp.message(Form.step_4)
async def handle_step_4(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_answers[user_id].append(message.text)

    # üìÆ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!\n\n–ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–º —Ç–≤–æ—é –∏–¥–µ—é –∏ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ.\n\n"
        "‚è± –û–±—ã—á–Ω–æ –Ω–∞ —ç—Ç–æ —É—Ö–æ–¥–∏—Ç –ø–∞—Ä—É —á–∞—Å–æ–≤. –ù–µ –¥—É–±–ª–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–π–¥—ë–º."
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ûï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—â—ë –∏–¥–µ—é")]],
        resize_keyboard=True
    )
    await message.answer("–•–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—â—ë –∏–¥–µ—é?", reply_markup=keyboard)

    # üßæ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    username = message.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞"
    summary = "\n\n".join(
        [f"<b>{questions[i]}</b>\n{user_answers[user_id][i]}" for i in range(len(questions))]
    )

    await bot.send_message(
        ADMIN_CHAT_ID,
        f"üì© –ó–∞—è–≤–∫–∞ –æ—Ç @{username}:\n\n{summary}"
    )

    user_answers.pop(user_id)
    await state.clear()

# üîÑ –ü–æ–≤—Ç–æ—Ä –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
@dp.message(F.text.lower() == "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—â—ë –∏–¥–µ—é")
async def restart_form(message: Message, state: FSMContext):
    await start_form(message, state)


# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling
    await bot.delete_webhook(drop_pending_updates=True)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
